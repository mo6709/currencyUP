BACKEND

1)builds api routes + nested rouets
4)device for investors and corporations (rad online special devise only for apis)
5)logic for the models (check this repo RubyMoney/money) 
2)validation for all db transactions
3)commit a lot to git
6)consuming api's to update the db
7)serialize all models 
8)build authorization for all actions 
9)build report/analization models (read online: http://blog.nrowegt.com/pure-ruby-on-rails-reporting/)







logic problems to solve.
CORPORATION 
1)can receive a transaction?
2)can make payment to investor?
3)can make purchase of currency
4) is good time to make a purchase of currency?
5) ‎how corporation should pay back the investor(what type of currency)?
6) ‎what is time period of the investment(in order to calculate the profit)?
7) ‎how much to pay interest on investment(in order to calculate the profit)?
8) ‎when to pay back to investor(should it be done before the time period because is cheaper? can't be later than the due date). 
9)what is the investment return rate for a given period of time? 

INVESTOR
1)can send currency to corporation?
2)how much money an investor have?
3)validate a transaction only if there is enough money in currency_investors of that investor and that type of currency and all received transactions are less or equal to the amount of received transaction minus the total_amount of that currency.

NOTE
1)investor should only have the option to invest in corporation







SCHEMA:
 create_table "corporations", force: :cascade do |t|
    t.string "regions_array"
    t.integer "investment_period"
    t.string "name"
    t.string "title"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end





MIGRATION:
  class CreateCorporations < ActiveRecord::Migration[5.1]
  def change
    create_table :corporations do |t|
      t.string  :regions_array
      t.integer :investment_period
      t.string  :name
      t.string  :title
      
      t.timestamps
    end
  end
end





MODEL:
class Corporation < ApplicationRecord
	has_many :currency_corporations
	has_many :currencies, through: :currency_corporations
	has_many :transactions
	has_many :investors, through: :transactions
	has_many :corporation_investments


	# make a a metheod to generate investments for 
	# the corporation (corporation_investment) whenever the 
	# manager of the corporation click on the generator button 
	# check for every region in the regions array look the 
	# currency with that region then make the culcalation for 
	# the return rate for the period of thime that the corporation specified 
	# then create a record in corporation_investment with all the info 
	# also dont forget to ake the corporation_investment active 


	# make a method to pay users their money,
	# in order to do ypu need look in all transaction records 
	# that have the same corporation id 
	# and created number months(corporation.investment_period) ago and 
	# collect all transactions from those record then make 
	# transactions with t_tyope of pay_to with the amount of the transaction plus 
	# the return_rate for the user that made the transaction 
end


CONTROLLER:
  class Api::V1::CorporationsController < Api::V1::BaseController
	def index
		@corporations = Corporation.all
		
		render json: { 
		    type: "corporations",
		    data: @corporations 
	    } 		
	end

	def show
		@corporation = Corporation.find_by(:id => params["id"])
        
        render json: {
        	type: "corporation",
        	data: @corporation
        }
	end

	def create
		beybug
		@corporation = Corporation.create(corporation_params)
		redirect_to api_v1_corporation_path(@corporation.id)
	end

	def update
		beybug
		@corporation = Corporation.find_by(:id => params["id"])
		@corporation.update(corporation_params)
		redirect_to api_v1_corporation_path(@corporation.id)
	end

	def destroy
		beybug
		@corporation.destroy(params["id"])
		redirect_to api_v1_corporations_path
	end

	private

	def corporation_params
		params.require(:corporation).permit(:name, :title)
	end
end






SCHEMA:
  create_table "investors", force: :cascade do |t|
    t.string "first_name"
    t.string "last_name"
    t.string "email"
    t.string "region"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end





MIGRATION:
  create_table :investors do |t|
      t.string   :first_name
      t.string   :last_name
      t.string   :email
      t.string   :region
      
      t.timestamps
    end





MODEL:
  class Investor < ApplicationRecord
	has_many :currency_investors
	has_many :currencies, through: :currency_investors
	has_many :transactions 
	has_many :corporations, through: :transactions

	# make a function that investor can generate a transaction based 
	# on the corporation_investment thart was clicked 
	# also make sure to ditect it from the currency_investor.total amount 
	# with the right currency id and add it to
	# currency_corporation total_amount with the right currency id
end






CONTROLLER:
  class Api::V1::InvestorsController < Api::V1::BaseController
	def index
		@investors = Investor.all
		
		render json: { 
		    type: "investors",
		    data: @investors 
	    } 		
	end

	def show
		@investor = Investor.find_by(:id => params["id"])
        @moneyMade = @investor.moneyMade();
        render json: {
        	type: "investor",
        	data: {
        		investor: @investor,
                moneyMade: @moneyMade
        	}
        }
	end

	def create
		beybug
		@investor = Investor.create(investor_params)
		redirect_to api_v1_investor_path(@investor.id)
	end

	def update
		beybug
		@investor = Investor.find_by(:id => params["id"])
		@investor.update(investor_params)
		redirect_to api_v1_investor_path(@investor.id)
	end

	def destroy
		beybug
		@investor.destroy(params["id"])
		redirect_to api_v1_investors_path
	end

	private

	def investor_params
		params.require(:investor).permit(:name, :title)
	end
end










namespace :api, defaults: {format: 'json'} do
    namespace :v1 do
      mount_devise_token_auth_for 'Investor', at: 'investor_auth'
      mount_devise_token_auth_for 'Corporation', at: 'corporation_auth'
      # as :corporation do
      #   # Define routes for Corporation within this block.
      # end
      
      #no authentication needed for these routes
      resources :currencies, :only => [:index, :show] #brake this route to have only waht they need 
      resources :corporation_investments, :only => [:index, :show] #brake this route to have only waht they need 
      resources :corporations, :only => [:index]
      
      #investor/corporation authentication needed for all transaction routes
      resources :transactions
      
      #investor authentication needed for these routes
      devise_scope :investor do        
        resources :investor, :only => [:create, :show, :update, :destroy] do 
          resources :currency_investors
        end
      end
      
      #corporation auhentication needed for these routes 
      devise_scope :corporations do
        resources :corporations, :only => [:show, :create, :update, :destroy] do 
          resources :currency_corporations
          resources :corporation_investments, :only => [:create, :update, :delete]
        end   
      end
      
    end
  end
